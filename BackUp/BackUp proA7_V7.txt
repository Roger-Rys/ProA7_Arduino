#include <TinyGPS++.h>
#include <SoftwareSerial.h>

SoftwareSerial proA7(10, 11); // pin RX y TX
TinyGPSPlus GPS; // Nombre GPS

////////VARIABLES DE SELECCION
byte datosGPS = 0; // Cambia de modo Serial al modo SerialGPS
byte detectaNumTel = 0; // Detecta si existe un numero telefonico

////////VARIABLES PINES
byte p_mux = 3; // Pin para mux
byte p_PWRKEY = 2; // Pin para activar la red GSM
byte ledSend = 7, ledLlamada = 6, ledGPSon = 4; // Leds de activacion

////////VARIABLE LLAMADAS
byte cuentaLlamada = 0;

//VARIABLES PARA SEPARAR TRAMA
char *strtok(char *str1, const char *str2); //Subfuncion separa la trama
char *numeroPhone = NULL; //No almacena en una memoria especifica
char numeroCellChar[100];

////////DATOS GPS
float LAT = 0, LNG = 0; // Valores de lat y long
float LAT_COMP = 0, LNG_COMP = 0; // Valores de lat y long nuevos a comparar
long TIME = 0;  // Almacena el tiempo recibido del moduloA7
byte SATELITES = 0; // Almacena el num Satelites del moduloA7
byte esperaDatosGps = 200; // Tiempo de espera
byte correccionLocacion = 0; // Numero de veces que se va a corregir

////////VARIABLES PARA DETECTAR LLAMADAS
char valorChar = 0; //Recive los valores char de proA7
String valorStr; // Almacena valores de "valorChar"
char trama1[100]; // valorStr a trama1
char trama2[100]; // valorStr a trama2
char tramaPhone[100]; // Almacena Numero
String strNumero1, strNumTel = ""; // trama separadas almacenada en StrNu..1 y 6
String strNumTelNew = "1"; //Almacenara el valor de strNumTel
char cNumero1[10], cNumTel[13]; // strNumero1 y 6 a arregloChar cNumero1 y 6
char cNumTelNew[13];
char datoNumero[35]; // Almacena numero Telefonico
String cellStr; // almacena numero sin comillas ""
char cellChar[15]; // almacen cellStr a char

////////VARIABLES PARA ENVIO MENSAJE SMS
char ATenvioSMS [20];

////////INICIO DE DISPOSITIVO
byte inicioDispositivo = 10;

/*******FUNC SETUP***************************************************************/
void setup() {
  ////////DECLARAR PINES
  pinMode(p_mux, OUTPUT);// Pin MUX como salida
  //PINES LEDS
  pinMode(ledLlamada, OUTPUT); pinMode(ledGPSon, OUTPUT); pinMode(ledSend, OUTPUT);
  //PIN PARA PWR KEY
  pinMode(p_PWRKEY, OUTPUT);

  delay(20000);  //Esperar a que modulo A7 inicialice
  Serial.begin(9600);
  while (!Serial) {
    ;// Espera al puerto serial se conecte
  }
  proA7.begin(9600); // Velocidad a transferir datos
  Serial.println("------------------------INICIO------------------------");
  configuracionInicial(); // Configuracion inicial
}

/*******FUNC LOOP**********************************************************************/
void loop() {
  ////////MODO NORMAL
  if (detectaNumTel == 1 && strstr(cNumTelNew, trama2) == NULL) { // Son diferentes, ninguna similitud NULL
    detectarNumTel(trama2); // Funcion para almacenar numero Telefonico
    byte i = 0;
    while (i < 11) {
      for (i = 1; i < 11; i++) {
        cellStr = cellStr + cNumTel[i];
      }
    }
    cellStr.toCharArray(cellChar, 15);
    detectaNumTel = 0;
  }
  else if (datosGPS == 1) {
    SerialDatosGPS(); // Activa el modo SerialDatosGPS
  }
  else if (datosGPS == 2 && strstr(cNumTelNew, cNumTel) != NULL && detectaNumTel == 0) { // Son iguales
    EnvioSMS(cellChar); // Funcion para enviar mensaje SMS
    datosGPS = 0; // Activa el modo ComunicacionSerial
  }
  else { // Se activo con valor de 0
    ComunicacionSerial(); // Modo serialComunicacionSerial
  }
}

/*******FUNC COMUNICACION_SERIAL*****************************************/
void ComunicacionSerial() {
  byte conteoRing = 0; // conteoRing
  byte contador = 0;
  
  digitalWrite(p_mux, LOW); // Cambia MUX al modo Seial
  ////////////////////////MODO SERIAL//////////////////////////////////
  while (proA7.available() > 0) {
    valorChar = proA7.read(); // valorChar
    valorStr += valorChar; //valorStr es un String
    if (valorChar == '\n') { // Detecta "\n" (salto de linea)
      Serial.print("STRING:"); Serial.println(valorStr);
      valorStr.toCharArray(trama1, 100); // ValorStr a un arregloChar

      ///////DETECTA EL RING/////////
      if ((strstr(trama1, " RING") != NULL) && conteoRing < 1) { // Detecta si trama1 = RING
        valorStr = " "; // Limpia valorStr
        conteoRing++; // Aumenta conteoRing
        datosGPS = 2; // Activa la funcion EnvioSMS
        proA7.println("AT+CLCC"); // Que numero llamada
        delay(500);
        proA7.println("ATH"); // Cuelga la llamada
        delay(500);
      }

      ///////DETECTA EL +CLCC contiene el numero telefonico/////////       && strNumTelNew != strNumTel  ó strstr(cNumTelNew, cNumTel) == NULL; son diferentes
      else if ((strstr(trama1, "+CLCC: 1,1,4,0,0,") != NULL) && contador < 1) { // Detecta si trama1 = +CLCC:...
        valorStr.toCharArray(trama2, 100); // Trama2 contiene el numero telefonico y mas valores
        contador++; // Aumenta "contador"
        //proA7.println("ATH"); // Cuelga la llamada
        detectaNumTel = 1; //Valor 1 significa que detecto el numero telefonico 
        Serial.print("trama2:");Serial.println(trama2); //Contiene el numero telefonico
        Serial.print("detectaNumTel:");Serial.println(detectaNumTel); //Imprime detectaNumTel
        Serial.print("datosGPS:");Serial.println(datosGPS); //Imprime datosGPS
        Serial.print("conteoRing:");Serial.println(conteoRing); //Imprime contador
        valorStr = " "; // Limpia valorStr
        memset(trama1, '\0', 100); // Limpia Trama
      }

      ///////BORRA STRING Y TRAMA1/////////
      else {
        valorStr = " "; // Limpia valorStr
        memset(trama1, '\0', 100); // Limpia Trama
      }
    }
  }

  ///////SERIAL DE ARDUINO/////////
  while (Serial.available()) {
    proA7.write(Serial.read()); // Serial lee, Disp escribe
  } delay(50);
}

/*******ENCUENTRA DATOS DE LATITUD Y LONGITUD**************************************************/
void DatosObtenidosGPS() {
  byte i = 0;
  for (i = 0; i <= esperaDatosGps; i++) {
    if (LAT != LAT_COMP && LNG != LNG_COMP) {
      LAT_COMP = LAT; LNG_COMP = LNG; // Se almacena los nuevos valores
      correccionLocacion++;
      if (correccionLocacion == 3) { //Se corrige los datos de locacion
        i = esperaDatosGps; // i va a valer "esperaDatosGps", para terminar secuencia
        Serial.println("----Valor GPS obtenidos----"); delay(3000);
      }
    }
    else if (i == 80) {
      proA7.println("AT+GPS=1"); delay(500);
    }
    else {
      SerialDatosGPS(); delay(500);
      Serial.println(i);
    }
  }
}

/******ENVIA EL MENSAJE SMS DE POSICION A NUMERO DETERMINADO*************/
void EnvioSMS(char *NumTel) {
  //digitalWrite(ledLlamada, HIGH); // Activa LedLlamada
  //digitalWrite(ledLlamada, LOW); // Desactiva LedLlamada

  ////////ACTIVA GPS
  digitalWrite(ledGPSon, HIGH); // Activar ledGPSon
  proA7.println("AT+GPS=1"); delay(1000); // Activar GPS
  SerialDatosGPS(); // Lee los datos GPS
  Serial.println("----GPS Activado----"); delay(500); // Mensaje
  DatosObtenidosGPS(); // Obtiene datos GPS correctos
  ////////DESACTIVAR GPS
  proA7.println("AT+GPS=0"); delay(200); // Desactivar GPS
  digitalWrite(p_mux, LOW); // Cambia MUX al serial
  Serial.println("----GPS Desactivado----"); delay(500);
  digitalWrite(ledGPSon, LOW); // Desactiva ledGPS
  Serial.println("---VALORES ALMACENADOS---");  // Muesta los valores GPS almacenados
  Serial.print("LAT="); Serial.println(LAT);
  Serial.print("LNG="); Serial.println(LNG);
  Serial.print("TIME="); Serial.println(TIME);
  Serial.print("SATELITES="); Serial.println(SATELITES);

  ////////ENVIAR SMS
  digitalWrite(ledSend, HIGH); delay(2000); // Activa ledSend (Envia SMS)
  proA7.println("AT+CMGF=1"); delay(2000); // Configura el Formato a enviar 1 es TEXT

  strcat(ATenvioSMS, "AT+CMGS="); // Almacena strig y caracter strNumTelNew
  strcat(ATenvioSMS, NumTel); // La union se guarda en "ATenvioSMS"
  Serial.println(ATenvioSMS);
  
  proA7.println(datoNumero); delay(2000); // Determina el numero a enviar SMS
  proA7.print(GPS.location.lat(), 6); proA7.print(","); // SMS contiene datos de
  proA7.println(GPS.location.lng(), 6);     // latitud(,) longitud
  delay(2000);
  proA7.println((char)26); // char26 es "ESC", para finalizar mensaje SMS
  
  Serial.println("Mensaje enviado");
  digitalWrite(ledSend, LOW); // Desactiva ledSend (Envio el SMS)
}

/*******FUNC DATOS_GPS********************************************************/
void SerialDatosGPS() {
  digitalWrite(p_mux, HIGH); // Cambia MUX al modo SerialDatosGPS
  while (proA7.available()) {
    GPS.encode(proA7.read());
  }
  delay(50);
  if (GPS.location.isUpdated()) {
    Serial.print("LAT="); Serial.println(GPS.location.lat(), 6); // Obtiene datos de latitud
    LAT = GPS.location.lat(), 6;   
    Serial.print("LNG="); Serial.println(GPS.location.lng(), 6); // Obtiene datos de longitud
    LNG = GPS.location.lng(), 6;
    Serial.print("TIME="); Serial.println(GPS.time.value()); // Obtiene datos de tiempo
    TIME = GPS.time.value();
    Serial.print("SATELITES="); Serial.println(GPS.satellites.value());
    SATELITES = GPS.satellites.value();
    delay(2000);
  }
}

/*******FUNC CONFIGURACION_INIC*******************************************************/
void configuracionInicial() {
  digitalWrite(p_mux, LOW); // Cambia MUX al serial
  digitalWrite(p_PWRKEY, HIGH); delay(3000); // 2 seg para Activar la red GSM
  digitalWrite(p_PWRKEY, LOW); delay(10000);
  Serial.println("PWR_KEY Activado"); // Mensaje que la red esta activada

  while (escribirComando("AT", "OK") != 1) { // Envia AT y espera respuesta OK
    Serial.println("----No conectado con modulo A7----");
    digitalWrite(p_PWRKEY, HIGH); delay(3000); // 2 seg para Activar la red GSM
    digitalWrite(p_PWRKEY, LOW); delay(10000);
  }
  Serial.println("----Conectado con modulo A7----");

  digitalWrite(ledGPSon, HIGH); // Activar ledGPS
  proA7.println("AT+GPS=1"); delay(20000); // Activar GPS
  SerialDatosGPS(); // Lee los datos GPS
  Serial.println("----GPS Activado----"); delay(500); // Mensaje
  DatosObtenidosGPS(); // Obtiene datos GPS correctos
  proA7.println("AT+GPS=0"); delay(500); // Desactivar GPS
  digitalWrite(p_mux, LOW); // Cambia MUX al serial
  Serial.println("----GPS Desactivado----"); delay(500);
  digitalWrite(ledGPSon, LOW); // Desactiva ledGPS

  Serial.println("-------SISTEMA FUNCIONANDO-------");
  delay(2000);
}

/**********DETECTAR NUMERO TELEFONICO*********************************/
void detectarNumTel(char *tramaPhone){
  //memset(tramaPhone, '\0', 100); // Limpia trama2
  memset(cNumero1, '\0', 100);

  char *cadenaSeparar; // Cadena a separar
  char *token;  // token es SubStrings de un String almacena la separacion
  byte conteo = 0; // contador
  cNumero1[0] = NULL;

  if (tramaPhone[0] != NULL ) { // Si tramaPhone no esta vacio
    Serial.print("numeroCelular: "); Serial.println(tramaPhone);
    cadenaSeparar = tramaPhone; // Almacena "tramaPhone" en "cadenaSeparar"
    while ((token = strtok_r(cadenaSeparar, ",", &cadenaSeparar)) != NULL) { // "," es el delimitador a separar
      conteo ++; // Aumenta "conteo"
      if (conteo == 1) { // Si "conteo"=1
        strNumero1 = token; // Token se almacena en "strNumero1"
      }
      if (conteo == 6) { // Si "conteo"=6
        strNumTel = token; // Token se almacena en "strNumTel"
        strNumTelNew = strNumTel;
      }
      strNumero1.toCharArray(cNumero1, 10); // "strNumero1" a arregloChar en cNumero1
      strNumTel.toCharArray(cNumTel, 13); // "strNumTel" a arregloChar en cNumTel
      strNumTelNew.toCharArray(cNumTelNew, 13); //
    }
    if (cNumero1[0] != NULL && cNumTel[0] != NULL) { // Si son diferentes de NULL
      strcat(datoNumero, "NumeroTelef: "); // Almacena strig y caracter
      strcat(datoNumero, cNumTel); // La union se guarda en "datoNumero"
      Serial.println(datoNumero);
    }
  }
}

/*******FUNC ESCRIBIR COMANDOS AT Y RESPUESTA**********************************************************************/
int escribirComando(String ATcomandos, char*Respuesta) {
  bool valido = 0; 
  char valorCharResult = 0;
  String valorStrResult; // Almacena valores de "valorChar"
  char cadenaStrAchar[100];  // valorStrResult a trama1
  
  proA7.println(ATcomandos); // Envia a proA7 el "ATcomandos"
  while (proA7.available() > 0 && valido == 0) {
    valorCharResult = proA7.read(); // valorChar
    valorStrResult += valorCharResult; //valorStr es un String
    if (valorCharResult == '\n') { // Detecta "\n" (salto de linea)
      Serial.print("ATresult:"); Serial.println(valorStrResult); 
      valorStrResult.toCharArray(cadenaStrAchar, 100); // ValorStr a un arregloChar
      if (strstr(cadenaStrAchar, Respuesta) != NULL) {
        valido = 1; delay(500);
      }
      else {
        valorStrResult = " "; // Limpia valorStr
        memset(cadenaStrAchar, '\0', 100); // Limpia Trama
      }
    }
  }
  Serial.print("ValorValido:"); Serial.println(valido);
  return valido;
}



